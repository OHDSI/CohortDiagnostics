% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Shared.R
\name{getResultsConceptSubjects}
\alias{getResultsConceptSubjects}
\title{#' Returns summary data from concept_count table of Cohort Diagnostics results data model
#'
#' @description
#' Returns summary data from concept_count table of Cohort Diagnostics results data model
#'
#' @template DataSource
#'
#' @template DatabaseIds
#'
#' @param conceptIds     A list of concept ids to get counts for
#'
#' @param minDate       Minimum date of range
#' @param maxDate       Maximum date of range
#'
#' @return
#' Returns a data frame (tibble)
#'
#' @export
getResultsConceptCountSummary <- function(dataSource,
                                          databaseIds,
                                          conceptIds,
                                          minDate = NULL,
                                          maxDate = NULL) {
  if (!is.null(minDate)) {
    warning('minDate is currently not implemented, ignoring')
  }
  if (!is.null(maxDate)) {
    warning('maxDate is currently not implemented, ignoring')
  }
  
  if (is(dataSource, "environment")) {
    if (!exists("conceptCount", envir = dataSource)) {
      return(NULL)
    }
    data <- get("conceptCount") %>%
      dplyr::filter(.data$domainField == "All") %>%
      dplyr::filter(.data$domainTable == "All") %>%
      dplyr::filter(.data$eventYear == 0) %>% 
      dplyr::filter(.data$eventMonth == 0) %>% 
      dplyr::filter(.data$conceptId %in% !!conceptIds) %>%
      dplyr::filter(.data$databaseId %in% !!databaseIds) %>%
      dplyr::select(.data$databaseId,
                    .data$conceptId,
                    .data$conceptCount,
                    .data$subjectCount)
  } else {
    if (is.null(dataSource$connection)) {
      stop("No connection provided. Unable to query database.")
    }
    
    if (!DatabaseConnector::dbIsValid(dataSource$connection)) {
      stop("Connection to database seems to be closed.")
    }
    
    sql <- "SELECT a.database_id,
              a.concept_id,
            	a.concept_count,
            	b.subject_count
            FROM @results_database_schema.concept_count
            	WHERE database_id IN (@database_id)
            		AND concept_id IN (@conceptIds)
            		AND domain_table IN ('All')
            		AND domain_field IN ('All')
            		AND event_year = 0
            		AND event_month = 0
            	ORDER BY a.database_id, a.concept_id desc
            ;"
    data <-
      renderTranslateQuerySql(
        connection = dataSource$connection,
        sql = sql,
        results_database_schema = dataSource$resultsDatabaseSchema,
        database_id = quoteLiterals(databaseIds),
        conceptIds = conceptIds,
        snakeCaseToCamelCase = TRUE
      )
  }
  
  if (nrow(data) == 0) {
    return(NULL)
  }
  return(data)
}
Returns data from concept_subjects table of Cohort Diagnostics results data model}
\usage{
getResultsConceptSubjects(dataSource, databaseIds = NULL, conceptIds = NULL)
}
\arguments{
\item{dataSource}{A list object that is the output of \code{createDatabaseDataSource} or \code{createFileDataSource} function. 
This object helps direct the function to query data from the database (created by \code{createDatabaseDataSource})
or a local premerged file (created by \code{createFileDataSource}). Premerged files are output of cohortDiagnostics
compiled into RData using \code{preMergeDiagnosticsFiles}. Database DataSources are data inserted into a remote
database (only a postgres database is supported) with tables created with DDL function \code{createResultsDataModel}
and uploaded using \code{uploadResults}}

\item{databaseIds}{A vector one or more databaseIds to retrieve the results for. This is a 
character field values from the `databaseId` field of the `database` table 
of the results data model.}

\item{conceptIds}{A list of concept ids to get counts for}
}
\value{
Returns a data frame (tibble)
}
\description{
Returns data from concept_subjects table of Cohort Diagnostics results data model
}
