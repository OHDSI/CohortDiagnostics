% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RunDiagnostics.R
\name{runCohortDiagnostics}
\alias{runCohortDiagnostics}
\title{Run cohort diagnostics}
\usage{
runCohortDiagnostics(
  packageName = NULL,
  cohortToCreateFile = "settings/CohortsToCreate.csv",
  baseUrl = NULL,
  cohortSetReference = NULL,
  connectionDetails = NULL,
  connection = NULL,
  cdmDatabaseSchema,
  oracleTempSchema = NULL,
  tempEmulationSchema = NULL,
  cohortDatabaseSchema,
  vocabularyDatabaseSchema = cdmDatabaseSchema,
  cohortTable = "cohort",
  cohortIds = NULL,
  inclusionStatisticsFolder = file.path(exportFolder, "inclusionStatistics"),
  exportFolder,
  databaseId,
  databaseName = databaseId,
  databaseDescription = databaseId,
  cdmVersion = 5,
  runInclusionStatistics = TRUE,
  runConceptSetDiagnostics = TRUE,
  runIncludedSourceConcepts = FALSE,
  runOrphanConcepts = FALSE,
  runVisitContext = TRUE,
  runBreakdownIndexEvents = FALSE,
  runIncidenceRate = TRUE,
  runCohortTimeSeries = TRUE,
  runDataSourceTimeSeries = TRUE,
  runCohortRelationship = TRUE,
  runCohortCharacterization = TRUE,
  covariateSettings = list(FeatureExtraction::createDefaultCovariateSettings(),
    FeatureExtraction::createCovariateSettings(useDemographicsAge = TRUE,
    useVisitCountLongTerm = TRUE, useVisitCountShortTerm = TRUE,
    useVisitConceptCountLongTerm = TRUE, useVisitConceptCountShortTerm = TRUE,
    useDemographicsPriorObservationTime = TRUE, useDemographicsPostObservationTime =
    TRUE, useDemographicsTimeInCohort = TRUE, useDemographicsIndexYearMonth = TRUE, )),
  runTemporalCohortCharacterization = TRUE,
 
    temporalCovariateSettings = FeatureExtraction::createTemporalCovariateSettings(useConditionOccurrence
    = TRUE, useDrugEraStart = TRUE, useProcedureOccurrence = TRUE, useMeasurement = TRUE,
    temporalStartDays = c(-365, -30, 0, 1, 31, seq(from = -421, to = -31, by = 30),
    seq(from = 0, to = 390, by = 30)), temporalEndDays = c(-31, -1, 0, 30, 365, seq(from
    = -391, to = -1, by = 30), seq(from = 30, to = 420, by = 30))),
  minCellCount = 5,
  incremental = FALSE,
  incrementalFolder = file.path(exportFolder, "incremental")
)
}
\arguments{
\item{packageName}{The name of the package containing the cohort definitions. Can be left NULL if 
\code{baseUrl} and \code{cohortSetReference} have been specified.}

\item{cohortToCreateFile}{The location of the cohortToCreate file within the package. Is ignored if 
\code{baseUrl} and \code{cohortSetReference} have been specified (i.e. webapi mode 
takes precedence).}

\item{baseUrl}{The base URL for the WebApi instance, for example:
"http://server.org:80/WebAPI". Can be left NULL if 
\code{packageName} and \code{cohortToCreateFile} have been specified.}

\item{cohortSetReference}{A data frame with four columns, as described in the details. Can be left NULL if 
\code{packageName} and \code{cohortToCreateFile} have been specified.}

\item{connectionDetails}{An object of type \code{connectionDetails} as created using the
\code{\link[DatabaseConnector]{createConnectionDetails}} function in the
DatabaseConnector package. Can be left NULL if \code{connection} is
provided.}

\item{connection}{An object of type \code{connection} as created using the
\code{\link[DatabaseConnector]{connect}} function in the
DatabaseConnector package. Can be left NULL if \code{connectionDetails}
is provided, in which case a new connection will be opened at the start
of the function, and closed when the function finishes.}

\item{cdmDatabaseSchema}{Schema name where your patient-level data in OMOP CDM format resides.
Note that for SQL Server, this should include both the database and
schema name, for example 'cdm_data.dbo'.}

\item{oracleTempSchema}{DEPRECATED by DatabaseConnector: use \code{tempEmulationSchema} instead.}

\item{tempEmulationSchema}{Some database platforms like Oracle and Impala do not truly support temp tables. To emulate temp 
tables, provide a schema with write privileges where temp tables can be created.}

\item{cohortDatabaseSchema}{Schema name where your cohort table resides. Note that for SQL Server,
this should include both the database and schema name, for example
'scratch.dbo'.}

\item{vocabularyDatabaseSchema}{Schema name where your OMOP vocabulary data resides. This is 
commonly the same as cdmDatabaseSchema. Note that for 
SQL Server, this should include both the database and
schema name, for example 'vocabulary.dbo'.}

\item{cohortTable}{Name of the cohort table.}

\item{cohortIds}{Optionally, provide a subset of cohort IDs to restrict the
diagnostics to.}

\item{inclusionStatisticsFolder}{The folder where the inclusion rule statistics are stored. Can be
left NULL if \code{runInclusionStatistics = FALSE}.}

\item{exportFolder}{The folder where the output will be exported to. If this folder
does not exist it will be created.}

\item{databaseId}{A short string for identifying the database (e.g. 'Synpuf').}

\item{databaseName}{The full name of the database. If NULL, defaults to databaseId.}

\item{databaseDescription}{A short description (several sentences) of the database. If NULL, defaults to databaseId.}

\item{cdmVersion}{The version of the OMOP CDM. Default 5. (Note: only 5 is supported.)}

\item{runInclusionStatistics}{Generate and export statistic on the cohort inclusion rules?}

\item{runConceptSetDiagnostics}{Concept Set Diagnostics includes concept counts, concepts in data source,
index event breakdown, concept cooccurrence, excluded concepts,
resolved concepts. This function call now supersedes runIncludedSourceConcepts,
runOrphanConcepts, runBreakdownIndexEvents.}

\item{runIncludedSourceConcepts}{(Deprecated) Generate and export the source concepts included in the cohorts?}

\item{runOrphanConcepts}{(Deprecated) Generate and export potential orphan concepts?}

\item{runVisitContext}{Generate and export index-date visit context?}

\item{runBreakdownIndexEvents}{(Deprecated) Generate and export the breakdown of index events?}

\item{runIncidenceRate}{Generate and export the cohort incidence  rates?}

\item{runCohortTimeSeries}{Generate and export the cohort level time series?}

\item{runDataSourceTimeSeries}{Generate and export the Data source level time series? i.e.
using all persons found in observation period table.}

\item{runCohortRelationship}{Do you want to compute temporal relationship between the cohorts being diagnosed. This
diagnostics is needed for cohort as feature characterization.}

\item{runCohortCharacterization}{Generate and export the cohort characterization?
Only records with values greater than 0.0001 are returned.}

\item{covariateSettings}{Either an object of type \code{covariateSettings} as created using one of
the createCovariateSettings function in the FeatureExtraction package, or a list
of such objects.}

\item{runTemporalCohortCharacterization}{Generate and export the temporal cohort characterization?
Only records with values greater than 0.001 are returned.}

\item{temporalCovariateSettings}{Either an object of type \code{covariateSettings} as created using one of
the createTemporalCovariateSettings function in the FeatureExtraction package, or a list
of such objects.}

\item{minCellCount}{The minimum cell count for fields contains person counts or fractions.}

\item{incremental}{Create only cohort diagnostics that haven't been created before?}

\item{incrementalFolder}{If \code{incremental = TRUE}, specify a folder where records are kept
of which cohort diagnostics has been executed.}
}
\description{
Runs cohort diagnostics on cohorts specified in cohortToCreateFile (file) or cohortSetReference. The function
checks if the specified cohorts are instantiated, and only runs diagnostics on the instantiated
cohorts (i.e. > 0 rows in cohort table).

Characterization:
If runTemporalCohortCharacterization argument is TRUE, then \code{RFeatureExtraction::createTemporalCovariateSettings}
is used as default.
}
\details{
Currently two ways of executing this function are supported, either 
(1) [Package Mode] embedded in a study package, e.g. by hydrating a the \code{SkeletonCohortDiagnosticsStudy} package using \code{Hydra::hydrate} or 
     inserting cohort specifications using \code{ROhdsiWebApi::insertCohortDefinitionSetInPackage}, or 
(2) [WebApi Mode] By using a WebApi interface to retrieve the cohort definitions. Note: WebApi mode takes precedence over package mode.

Structure of \code{cohortSetReference} or \code{cohortToCreateFile}
\describe{
\item{cohortId}{(required) The cohort Id in Atlas for the cohort you want to diagnose.}
\item{cohortName}{(optional) The full name of the cohort. This will be shown in the Shiny app. If not provided, the 
 name used in Atlas will be displayed.}
}

In addition - \code{cohortToCreateFile} is able to accept additional optional columns
\describe{
\item{metaData}{(optional) A JSON with metadata of the cohort that you would like to provided. 
Logic description may be a metadata object. Other types of metadata objects may include project code, author, version, key words etc.}
}
 
When using this function in Package Mode: Use the \code{packageName} and \code{cohortToCreateFile} to specify
the name of the study package, and the name of the cohortToCreate file within that package, respectively

When using this function in WebApi Mode: use the \code{baseUrl} and \code{cohortSetReference} to specify how to 
connect to the WebApi, and which cohorts to fetch, respectively.

The \code{cohortSetReference} argument maybe a vector of atlas ids or it maybe a data frame object. 
If \code{cohortSetReference} is a data frame object:
\describe{
\item{cohortId}{(required) The cohort Id in Atlas for the cohort you want to diagnose.}
\item{cohortName}{(optional) The full name of the cohort. This will be shown in the Shiny app. If not provided, the cohort id will be displayed.}
}
}
